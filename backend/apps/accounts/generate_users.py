"""
Add testing data to database.

route /accounts/add_data aufrufen um user zu generieren
muss in urls.py auskommentiert werden
"""

from django.conf import settings
from django.http import HttpResponse
import numpy as np

from apps.accounts.models import User
from apps.iamstudent.models import AUSBILDUNGS_TYPEN_COLUMNS, Student
from apps.ineedstudent.models import Hospital

mail = lambda x: "%s@email.com" % x  # noqa: E731
big_city_plzs = [
    "01067",
    "01069",
    "01097",
    "01099",
    "01109",
    "01127",
    "01129",
    "01139",
    "01157",
    "01159",
    "01169",
    "01187",
    "01189",
    "01217",
    "01219",
    "01237",
    "01239",
    "01257",
    "01259",
    "01277",
    "01279",
    "01307",
    "01309",
    "01324",
    "01326",
    "04103",
    "04105",
    "04107",
    "04109",
    "04129",
    "04155",
    "04157",
    "04158",
    "04159",
    "04177",
    "04178",
    "04179",
    "04205",
    "04207",
    "04209",
    "04229",
    "04249",
    "04275",
    "04277",
    "04279",
    "04288",
    "04289",
    "04299",
    "04315",
    "04316",
    "04317",
    "04318",
    "04328",
    "04329",
    "04347",
    "04349",
    "04356",
    "04357",
    "06108",
    "06110",
    "06112",
    "06114",
    "06116",
    "06118",
    "06120",
    "06122",
    "06124",
    "06126",
    "06128",
    "06130",
    "06132",
    "10115",
    "10117",
    "10119",
    "10178",
    "10179",
    "10243",
    "10245",
    "10247",
    "10249",
    "10315",
    "10317",
    "10318",
    "10319",
    "10365",
    "10367",
    "10369",
    "10405",
    "10407",
    "10409",
    "10435",
    "10437",
    "10439",
    "10551",
    "10553",
    "10555",
    "10557",
    "10559",
    "10585",
    "10587",
    "10589",
    "10623",
    "10625",
    "10627",
    "10629",
    "10707",
    "10709",
    "10711",
    "10713",
    "10715",
    "10717",
    "10719",
    "10777",
    "10779",
    "10781",
    "10783",
    "10785",
    "10787",
    "10789",
    "10823",
    "10825",
    "10827",
    "10829",
    "10961",
    "10963",
    "10965",
    "10967",
    "10969",
    "10997",
    "10999",
    "12043",
    "12045",
    "12047",
    "12049",
    "12051",
    "12053",
    "12055",
    "12057",
    "12059",
    "12099",
    "12101",
    "12103",
    "12105",
    "12107",
    "12109",
    "12157",
    "12159",
    "12161",
    "12163",
    "12165",
    "12167",
    "12169",
    "12203",
    "12205",
    "12207",
    "12209",
    "12247",
    "12249",
    "12277",
    "12279",
    "12305",
    "12307",
    "12309",
    "12347",
    "12349",
    "12351",
    "12353",
    "12355",
    "12357",
    "12359",
    "12435",
    "12437",
    "12439",
    "12459",
    "12487",
    "12489",
    "12524",
    "12526",
    "12527",
    "12529",
    "12555",
    "12557",
    "12559",
    "12587",
    "12589",
    "12619",
    "12621",
    "12623",
    "12625",
    "12627",
    "12629",
    "12679",
    "12681",
    "12683",
    "12685",
    "12687",
    "12689",
    "13051",
    "13053",
    "13055",
    "13057",
    "13059",
    "13086",
    "13088",
    "13089",
    "13125",
    "13127",
    "13129",
    "13156",
    "13158",
    "13159",
    "13187",
    "13189",
    "13347",
    "13349",
    "13351",
    "13353",
    "13355",
    "13357",
    "13359",
    "13403",
    "13405",
    "13407",
    "13409",
    "13435",
    "13437",
    "13439",
    "13465",
    "13467",
    "13469",
    "13503",
    "13505",
    "13507",
    "13509",
    "13581",
    "13583",
    "13585",
    "13587",
    "13589",
    "13591",
    "13593",
    "13595",
    "13597",
    "13599",
    "13627",
    "13629",
    "14050",
    "14052",
    "14053",
    "14055",
    "14057",
    "14059",
    "14089",
    "14109",
    "14129",
    "14163",
    "14165",
    "14167",
    "14169",
    "14193",
    "14195",
    "14197",
    "14199",
    "15230",
    "15232",
    "15234",
    "15236",
    "18055",
    "18057",
    "18059",
    "18069",
    "18106",
    "18107",
    "18109",
    "18119",
    "18146",
    "18147",
    "24937",
    "24939",
    "24941",
    "24943",
    "24944",
    "39104",
    "39106",
    "39108",
    "39110",
    "39112",
    "39114",
    "39116",
    "39118",
    "39120",
    "39122",
    "39124",
    "39126",
    "39128",
    "39130",
    "39221",
    "42103",
    "42105",
    "42107",
    "42109",
    "42111",
    "42113",
    "42115",
    "42117",
    "42119",
    "42275",
    "42277",
    "42279",
    "42281",
    "42283",
    "42285",
    "42287",
    "42289",
    "42327",
    "42329",
    "42349",
    "42369",
    "42389",
    "42399",
    "44135",
    "44137",
    "44139",
    "44141",
    "44143",
    "44145",
    "44147",
    "44149",
    "44225",
    "44227",
    "44229",
    "44263",
    "44265",
    "44267",
    "44269",
    "44287",
    "44289",
    "44309",
    "44319",
    "44328",
    "44329",
    "44339",
    "44357",
    "44359",
    "44369",
    "44379",
    "44388",
    "48143",
    "48145",
    "48147",
    "48149",
    "48151",
    "48153",
    "48155",
    "48157",
    "48159",
    "48161",
    "48163",
    "48165",
    "48167",
    "50667",
    "50668",
    "50670",
    "50672",
    "50674",
    "50676",
    "50677",
    "50678",
    "50679",
    "50733",
    "50735",
    "50737",
    "50739",
    "50765",
    "50767",
    "50769",
    "50823",
    "50825",
    "50827",
    "50829",
    "50858",
    "50859",
    "50931",
    "50933",
    "50935",
    "50937",
    "50939",
    "50968",
    "50969",
    "50996",
    "50997",
    "50999",
    "51061",
    "51063",
    "51065",
    "51067",
    "51069",
    "51103",
    "51105",
    "51107",
    "51109",
    "51143",
    "51145",
    "51147",
    "51149",
    "53111",
    "53113",
    "53115",
    "53117",
    "53119",
    "53121",
    "53123",
    "53125",
    "53127",
    "53129",
    "53173",
    "53175",
    "53177",
    "53179",
    "53225",
    "53227",
    "53229",
    "60385",
    "60386",
    "60388",
    "60435",
    "60437",
    "60438",
    "66111",
    "66113",
    "66115",
    "66117",
    "66119",
    "66121",
    "66123",
    "66125",
    "66126",
    "66127",
    "66128",
    "66129",
    "66130",
    "66131",
    "66132",
    "66133",
    "70173",
    "70174",
    "70176",
    "70178",
    "70180",
    "70182",
    "70184",
    "70186",
    "70188",
    "70190",
    "70191",
    "70192",
    "70193",
    "70195",
    "70197",
    "70199",
    "70327",
    "70329",
    "70372",
    "70374",
    "70376",
    "70378",
    "70435",
    "70437",
    "70439",
    "70469",
    "70499",
    "70563",
    "70565",
    "70567",
    "70569",
    "70597",
    "70599",
    "70619",
    "70629",
    "80331",
    "80333",
    "80335",
    "80336",
    "80337",
    "80339",
    "80469",
    "80538",
    "80539",
    "80634",
    "80636",
    "80637",
    "80638",
    "80639",
    "80686",
    "80687",
    "80689",
    "80796",
    "80797",
    "80798",
    "80799",
    "80801",
    "80802",
    "80803",
    "80804",
    "80805",
    "80807",
    "80809",
    "80933",
    "80935",
    "80937",
    "80939",
    "80992",
    "80993",
    "80995",
    "80997",
    "80999",
    "81241",
    "81243",
    "81245",
    "81247",
    "81249",
    "81369",
    "81371",
    "81373",
    "81375",
    "81377",
    "81379",
    "81475",
    "81476",
    "81477",
    "81479",
    "81539",
    "81541",
    "81543",
    "81545",
    "81547",
    "81549",
    "81667",
    "81669",
    "81671",
    "81673",
    "81675",
    "81677",
    "81679",
    "81735",
    "81737",
    "81739",
    "81825",
    "81827",
    "81829",
    "81925",
    "81927",
    "81929",
]


def delete_fakes():
    User.objects.filter(email__contains="email").delete()


def populate_db(request):
    if settings.DEBUG:
        delete_fakes()
        n_student = 2000
        n_hospital = 200
        plzs = np.random.choice(big_city_plzs, size=n_student)
        months = np.random.choice(np.arange(1, 12), size=n_student)
        days = np.random.choice(np.arange(2, 15), size=n_student)
        year = 2020

        for i in range(n_student):
            m = mail(i)
            kwd = dict(
                zip(
                    AUSBILDUNGS_TYPEN_COLUMNS,
                    np.random.choice([True, False], size=len(AUSBILDUNGS_TYPEN_COLUMNS)),
                )
            )

            pwd = User.objects.make_random_password()
            u = User.objects.create(username=m, email=m, is_student=True, password=pwd)
            _ = Student.objects.create(
                user=u,
                plz=plzs[i],
                availability_start="{}-{:02d}-{:02d}".format(year, months[i], days[i]),
                **kwd
            )
        plzs = np.random.choice(big_city_plzs, size=n_student)
        for i in range(n_hospital):
            m = mail(i + n_student)
            pwd = User.objects.make_random_password()
            u = User.objects.create(username=m, email=m, is_student=True, password=pwd)
            _ = Hospital.objects.create(
                user=u, plz=plzs[i], ansprechpartner="XY", sonstige_infos="yeaah"
            )
        return HttpResponse("Done. %s entries." % User.objects.all().count())
    return HttpResponse("Access forbidden: Not in debug mode.")
